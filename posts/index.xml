<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 3AM Engineering</title>
        <link>https://3am.engineering/posts/</link>
        <description>Recent content in Posts on 3AM Engineering</description>
        <generator>Hugo -- gohugo.io</generator>
        <lastBuildDate>Tue, 19 May 2020 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://3am.engineering/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Metalens for Hacker News</title>
            <link>https://3am.engineering/2020/05/metalens-for-hacker-news/</link>
            <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
            
            <guid>https://3am.engineering/2020/05/metalens-for-hacker-news/</guid>
            <description>Download it on the app store TL;DR: If you&amp;rsquo;ll download the app don&amp;rsquo;t forget to toggle the Safari switch in Settings
  Motivation I would often scroll HN, see something interesting but not open the link, by the time I got home from the office (remember offices?) it was from the top items. At the end of the day, I just wanted a way to go back in time at a specific hour or get a curated list of news items</description>
            <content type="html"><![CDATA[

<h4 id="download-it-on-the-app-store-https-apps-apple-com-us-app-metalens-id1506654571-ls-1"><a href="https://apps.apple.com/us/app/metalens/id1506654571?ls=1">Download it on the app store</a></h4>

<p>TL;DR: If you&rsquo;ll download the app don&rsquo;t forget to toggle the Safari switch in Settings</p>

<figure>
    <img src="/images/metalens_logo.jpg"/> 
</figure>


<h3 id="motivation">Motivation</h3>

<p>I would often scroll HN, see something interesting but not open the link, by the time I got home from the office (remember offices?) it was from the top items. At the end of the day, I just wanted a way to go back in time at a specific hour or get a curated list of news items</p>

<figure>
    <img src="/images/hn_digest_1.jpg"
         alt="Metalens daily HN digest email"/> <figcaption>
            <p>Metalens daily HN digest email</p>
        </figcaption>
</figure>


<p>This is how it all started, as a newsletter, with only one subscriber, me.
For categorization I used natural language processing from GCP, news items would get categorized either by the site&rsquo;s content or by HN comments, depends on what source gave a better confidence result.
If the categories seem familiar it&rsquo;s probably because Reddit probably uses the same API for its categorization.</p>

<p>Either way, it would only hit the mark for half of the items, the rest of the items needed some manual help, the language processing, and categorization part need a lot more work,
I think that&rsquo;s one reason why AI startups use people and sell it as an AI service, Intelligence as a Service?</p>

<h1 id="the-ios-app">The iOS app</h1>

<figure>
    <img src="/images/metalens_app.jpg"/> 
</figure>


<p>A few months ago I decided to put my best efforts into an iOS client for HN, yes I know there are some good apps out there but they offer the same or fewer features than the HN website.</p>

<p>The almost &ldquo;real-time&rdquo; analytics I thought looks fun and even offers an insight into how an item/topic is doing overtime in comments and score activity.</p>

<p>I often use the granular time travel to back and read some pretty cool items I missed, it works fine for me, I&rsquo;m more of a lurker, the comments I wanted to write are often already written by somebody else or the subject is way out of my domain of expertise.</p>

<h3 id="happy-accidents">Happy accidents</h3>

<p>About the flame graph, on top it tracks score activity and on the bottom the conversation activity.</p>

<figure>
    <img src="/images/metalens_graphs.jpg"
         alt="Flamy graphs!"/> <figcaption>
            <p>Flamy graphs!</p>
        </figcaption>
</figure>


<p>But its appearance is a &ldquo;bug&rdquo;, I mean there should only be a max of 5 red dots, 3 yellow, 2 blue, per column in score activity.
It&rsquo;s the result of a series of little happy accidents made in a late-night engineering session. I looked at it the other day, I have no idea what I wrote, I&rsquo;ll leave that part untouched, wrote some tests to make sure the output values were withing range, I&rsquo;ll leave the magic undisturbed, plus it makes the flame graph look more &ldquo;flamy&rdquo;!</p>

<h3 id="swiftui">SwiftUI</h3>

<p>Initially tried Swift UI, development was going so fast, &ldquo;I will probably never go back to UIKit&rdquo; I was thinking while clicking away, the prototyping phase went smooth.
But SwiftUI it&rsquo;s not ready for production yet, it makes some things trivial and some trivial things a pain in the ass.</p>

<ul>
<li>Want to implement a pull to refresh feature, nope.</li>
<li>Want to find out how far has the user scrolled the list? nope.</li>
<li>The list goes on.</li>
</ul>

<p>There are workarounds, but it felt like I was fighting SwiftUI.
Also, the app at that stage had some bizarre bugs when items in a list would not have the correct height until you scrolled a pixel or two.
Then the scrolling performance was not good, using UIKit and CoreAnimation reduced CPU time in half when scrolling the same items.
I had to rewrite it all in good old UIKit.</p>

<h3 id="app-store-review-process">App store review process</h3>

<p>I got the same rejection reason as <a href="https://medium.com/swlh/my-app-is-dead-in-the-water-93a97a137eff">Matt Stanford with his Hacker News Zero app</a>.
The only way I could get it approved was by opening links in Safari app, while every other app seems to get away just fine by opening them in <code>SFSafariViewController</code>.
I included a toggle switch in settings when enabled opens links in <code>SFSafariViewController</code> and this seems to satisfy the reviewer,</p>

<p>The more you think about it the less sense it makes. Why Apple even added <code>SFSafariViewController</code> and recommends it as the primary way to open external links, should it only be used for ToS and Privacy Policies?</p>

<figure>
    <img src="/images/legal_issues.jpg"
         alt="Copyright infringement?"/> <figcaption>
            <p>Copyright infringement?</p>
        </figcaption>
</figure>


<p>Then there was the inappropriate use of auto-renewing subscriptions, the reviewers were very insistent that I should use non-renewing subscription even after adding additional features to the Metalens Premium package.
Ok, Apple, be it your way.</p>

<figure>
    <img src="/images/subscriptions_issues.jpg"/> 
</figure>


<p>But after 6 reviews and 5 iterations, Metalens finally got approved. If you plan to install and use it definitely toggle on the &ldquo;Use internal Safari browser&rdquo; switch.</p>

<h3 id="upcoming-features-and-improvements">Upcoming features and improvements</h3>

<p>The app is still not there yet in terms of features, there is a lot more work to be done, If you would like to support the development and prevent another forgotten HN client app zombie on the app store you should subscribe to Metalens Premium.</p>

<ul>
<li>Add search, seems like a trivial thing to add with <a href="https://hn.algolia.com/api">HN Search API</a></li>
<li>Add trends with <a href="https://showcase.metamate.io/hackernews-trends">Metamate</a></li>
<li>I would really like to improve the current &ldquo;Curated Feed&rdquo; section, rework categories and maybe use trends to its advantage, a lot to explore here.</li>
<li>Get notified when someone replies to your comments or submission.</li>
<li>Add one-time payment as an alternative to subscriptions.</li>
</ul>

<h1 id="the-backend">The backend</h1>

<p>Nothing special, Go + SQLite running in a VM on CGP with Cloudflare + CF Workers so I could take advantage of their network and cache in case the app gets a surge of requests, how optimistic of me.</p>
]]></content>
        </item>
        
        <item>
            <title>A proper OP-Z plugin</title>
            <link>https://3am.engineering/2019/06/a-proper-op-z-plugin/</link>
            <pubDate>Sat, 08 Jun 2019 00:00:00 +0000</pubDate>
            
            <guid>https://3am.engineering/2019/06/a-proper-op-z-plugin/</guid>
            <description>Let&amp;rsquo;s be honest, previous attempt at an OP-Z plugin thingy was a failure, Main drawbacks being the boot times, all the bugs and overhead that come with running Linux &amp;amp; jack &amp;amp; supercollider on such a small machine. You just don&amp;rsquo;t need Linux if you want to run a medium complexity synth. But most importantly it kinda failed at being fun.
  Teesny 3.6 and teensy audio board</description>
            <content type="html"><![CDATA[

<p>Let&rsquo;s be honest, <a href="https://victorbitca.github.io/posts/2019/04/creating-an-op-z-plugin/">previous attempt</a> at an OP-Z plugin thingy was a failure,
Main drawbacks being the boot times, all the bugs and overhead that come with running <code>Linux</code> &amp; <code>jack</code> &amp; <code>supercollider</code> on such a small machine.
You just don&rsquo;t need Linux if you want to run a medium complexity synth.
But most importantly it kinda failed at being fun.</p>

<figure>
    <img src="/images/thigs_to_come.jpg"
         alt="Teesny 3.6 and teensy audio board"/> <figcaption>
            <p>Teesny 3.6 and teensy audio board</p>
        </figcaption>
</figure>


<p>With <a href="https://www.pjrc.com/store/teensy36.html">teensy 3.6</a> &amp; <a href="https://www.pjrc.com/store/teensy3_audio.html">teensy audio board</a>, the boot times are around a second or less, it&rsquo;s faster than the OP-Z!
The CPU usage is less on teensy than on Raspberry Pi Zero for the same building blocks (oscilators and other effects).
<a href="https://www.pjrc.com/teensy/gui/">Teensy audio library</a> is a really great tool, synths that can rival the OP-Z&rsquo;s built-in ones can be easily built using the basic building blocks.</p>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/MKe8P8wL87o" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<p>The first iteration it&rsquo;s a simple hackable synth, maybe also a sampler in the future.
A small semi-modular portable plugin <a href="http://www.makenoisemusic.com/synthesizers/ohcoast">like this one</a> could be a bit more fun but that&rsquo;s for the next time.</p>

<p><a href="https://github.com/VictorBitca/opz-teensy">Full code here</a>.</p>

<h2 id="june-update">June update</h2>

<p>The natural evolution of the previous design:</p>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/5gF2k2Sb0Bk" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<p>The micro-modular was inspired by the <a href="http://www.makenoisemusic.com/synthesizers/ohcoast">o-coast</a> and the <a href="https://bastl-instruments.com/instruments/kastle">kastl</a> and of course the full size <a href="https://en.wikipedia.org/wiki/Modular_synthesizer">modular systems</a>.
While some of those run mostly analog circuitry in their signal paths, teensy can&rsquo;t do that, it&rsquo;s just an emulation of one.</p>

<figure>
    <img src="/images/minimodular.jpg"
         alt="The minimodular"/> <figcaption>
            <p>The minimodular</p>
        </figcaption>
</figure>


<p>Initially, things had to be simple, connections could not be stackable, one output in only in one input,
The micro-modular is based on <a href="https://www.pjrc.com/store/teensy36.html">teensy 3.6</a> as its main board and an Arduino Nano as a slave expansion board,
In hindsight, I should have ditched the Arduino and some &ldquo;modules&rdquo; on the board, for example, FX section should not be on board.</p>

<p>Also, Arduino nano is not compatible with the teensy board, Arduino runs on 5v and it could fry the teensy board, it had to be converted to 3.3V, there are tutorials for this so I&rsquo;m not gonna cover this here.</p>

<p>Next step is the teensy firmware, teensy audio tool is good for medium complexity synth, but I needed:</p>

<ul>
<li>4 oscillators with FM, PM and PW modulation</li>
<li>2 LFOs with PW modulation</li>
<li>A VCF</li>
<li>A pair of VCAs</li>
<li>Two envelopes generators and a few utilities like mixers and splitters</li>
</ul>

<p>all of those only for one voice, the synth would have 4 at least.</p>

<p>One major drawback of the teensy audio framework is that <code>AudioConnection</code> objects can&rsquo;t be created at the runtime so every possible connection has to be made beforehand and it looks like a total mess.</p>

<figure>
    <img src="/images/one_voice.jpg"
         alt="No"/> <figcaption>
            <p>No</p>
        </figcaption>
</figure>


<p>Once I was done with the firmware CPU and memory usage was above 80% with a power consumption of 140 mA from the OP-Z (when driving the headset at full power) that&rsquo;s above the advertised 100 mA max that OP-Z could output, so I had to underclock it a bit and remove extra FX and LEDs, even then I could not get it below 120 mA without removing a synth voice so I left it at 120 mA.</p>

<p>The end result is a close enough modular emulation that certainly provides a lot more sound variety than any built-in op-z synth engine.</p>

<h2 id="drawbacks">Drawbacks</h2>

<ul>
<li>OP-Z current limit at ~140 mA</li>
<li>Decreased battery life</li>
<li>Not as flexible as a modular</li>
<li>Internal audio clipping</li>
<li>Not tightly integrated with the OP-Z</li>
<li>Massive code base</li>
</ul>

<h2 id="whats-the-point">Whats the point</h2>

<p>Given that your phone has more processing power and always in your pocket what&rsquo;s the point in trying to create another portable device that can do only one thing, honestly I dont know, I just felt like toying around with novelty hardware creation, I think people are drawn to it even if its limited to only one function like the demand for pocket operators and other toy like synths shows or maybe its the tactile interface, feel different than smartphone.</p>
]]></content>
        </item>
        
        <item>
            <title>Skip that intro</title>
            <link>https://3am.engineering/2019/04/skip-that-intro/</link>
            <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://3am.engineering/2019/04/skip-that-intro/</guid>
            <description>Probably you&amp;rsquo;ve been binge-watching a series and the intro/outro song is already stuck in your head, the visuals already burned onto your retina, you&amp;rsquo;re ready to do anything to not hear one more time those songs.
Some streaming services like Netflix already have a skip intro button, but how does it work? Do you really think that people at Netflix in charge of their content specify in their contracts that content providers should also provide the intro/outro time range?</description>
            <content type="html"><![CDATA[

<p>Probably you&rsquo;ve been binge-watching a series and the intro/outro song is already stuck in your head, the visuals already burned onto your retina, you&rsquo;re ready to do anything to not hear one more time those songs.</p>

<p>Some streaming services like Netflix already have a skip intro button, but how does it work?
Do you really think that people at Netflix in charge of their content specify in their contracts that content providers should also provide the intro/outro time range? That would be too easy.</p>

<p>I&rsquo;ll try to automate that using <code>golang</code> and <code>chromaprint</code> mostly for fun and profit and maybe I&rsquo;ll learn something along the way.
I&rsquo;ll also need to install <a href="https://ffmpeg.org/"><code>ffmpeg</code></a> to do some work on the video files themselves and <code>golang</code> <a href="https://github.com/go-fingerprint/">wrappers</a> for <a href="https://acoustid.org/chromaprint">chromaprint</a></p>

<h2 id="preparation-phase">Preparation phase</h2>

<p>Let&rsquo;s imagine I own some JoJo&rsquo;s Bizarre Adventure episodes.
First, I need to strip the audio from the video files, using <code>ffmpeg</code> is fast and it looks like this in my case.</p>

<p>Strip the audio stream: <code>ffmpeg -i input.mkv -vn -c:a copy output.m4a</code></p>

<p>Next, I&rsquo;ll need to uncompress it into a .wav file also drop as many bytes as possible, making it mono and trimming it to first 3 minutes where usually the intro song plays should be good enough.</p>

<p>Convert to .wav: <code>ffmpeg -i output.m4a output.wav</code></p>

<p>Convert stereo .wav to mono .wav: <code>ffmpeg -I output.wav -ac 1 m_output.wav</code></p>

<p>Trim down to 180 seconds: <code>ffmpeg -i m_output.wav -af atrim=0:180 m_t_output.wav</code></p>

<p>Yes, it can be automated with a bash script, but I needed to do for like ten files&hellip; I should&rsquo;ve written a script.</p>

<h2 id="finding-the-common-region">Finding the common region</h2>

<p>By running a piece of raw audio data (a .wav file with no header) through chromaprint you get the fingerprints of those files which are actually just spectrograms, <a href="https://oxygene.sk/2011/01/how-does-chromaprint-work/">more info on how it works</a>.</p>

<figure>
    <img src="/images/ep2wav.jpg"
         alt="Typical output for a 3min .wav file"/> <figcaption>
            <p>Typical output for a 3min .wav file</p>
        </figcaption>
</figure>


<p>Comparing two perfectly aligned audio files results in this image.
The black area at the beginning is where the spectrograms <code>XOR</code>-ed perfectly resulting mostly in a black area.</p>

<figure>
    <img src="/images/2min-diff.jpg"
         alt="Comparing first 2min of two episodes"/> <figcaption>
            <p>Comparing first 2min of two episodes</p>
        </figcaption>
</figure>


<p>But in some cases, most of the cases actually intros aren&rsquo;t aligned perfectly, before the intro song begins there could be some scenes from previous episodes or some pre-intro scenes from the current episode.
Those scenes always vary in length and if I were to compare the spectrograms it would look like a bunch of noise.</p>

<p>One way to find the common areas on two different spectrograms is to slide them past each other like a puzzle each iteration resulting in a match score.
I start with an 50% offset between the slices (<a href="https://blog.golang.org/go-slices-usage-and-internals">golang view of an array</a>) and end on -50% offset, good enough for the intro I&rsquo;m searching, each time the offset decreases the slices get actually a bit bigger then again smaller (highlighted in blue).
Another way could be using the &ldquo;Longest Common Substring&rdquo; approach with some tolerance between values but that&rsquo;s for another time.</p>

<p>After all the slide and compare action, I&rsquo;ll pick the iteration with the best score and do a comparison, usually resulting in something like the picture above.</p>

<figure>
    <img src="/images/match-search.jpg"
         alt="Initial state - incremental sliding and comparing two fingerprints"/> <figcaption>
            <p>Initial state - incremental sliding and comparing two fingerprints</p>
        </figcaption>
</figure>


<p>By the way, raw fingerprints of those two files are just <code>int32</code> slices, images above are just for visual aid and the <code>int32</code> values are one-pixel width vertical slices from each fingerprint.
The comparison between the values is done using <a href="https://en.wikipedia.org/wiki/Hamming_distance">Hamming distance</a> for each pair of <code>int32</code> values.</p>

<p>Once I compared the best match I get a similar result but with more numbers:</p>

<p><code>[15, 20, 9, 13, 12, 10, 6, 7, 3, 2, 2, 1, 0, 3, 2, 1, 9, 13, 12, 14]</code></p>

<p>Each value is the Hamming distance between two <code>int32</code> pairs and its easy to spot somewhere in the middle there is a subsequence that gets below 10 and sits there for quite a while.
That is the matching area I was looking for, If I were to compare those fingerprints and output an image it would have a blacker area somewhere in the middle, next step is to calculate how long it is, then taking into account the offset it is trivial to calculate where the intro song started and ended for both files.</p>

<figure>
    <img src="/images/matcher_demo.gif"
         alt="Searching for intro in 10 files (single threaded)"/> <figcaption>
            <p>Searching for intro in 10 files (single threaded)</p>
        </figcaption>
</figure>


<h2 id="conclusion">Conclusion</h2>

<p>The end result is a pretty reliable way of finding common regions/fingerprints in two or more audio files.</p>

<p>The implementation can be seen <a href="https://github.com/VictorBitca/matcher"><code>here</code></a>.</p>
]]></content>
        </item>
        
        <item>
            <title>An OP-Z plugin</title>
            <link>https://3am.engineering/2019/04/an-op-z-plugin/</link>
            <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://3am.engineering/2019/04/an-op-z-plugin/</guid>
            <description>Update On 19.07.01 there was a firmware update, now OP-Z can sample from usb or the mic making half of this article deprecated.
Intro It began in the summer of 2018, when I’ve been playing with my PO-20 “Arcade” wondering if it&amp;rsquo;s hackable, maybe there&amp;rsquo;s a community around hacking pocket operators like there is one for Canon “Magic Lantern” firmware.
There is no such thing. But there is OTTO, an open source project initially inspired by OP-1 but clearly going in their own direction at the moment, consider contributing if you&amp;rsquo;re interested.</description>
            <content type="html"><![CDATA[

<h4 id="update">Update</h4>

<p>On 19.07.01 there was a firmware update, now OP-Z can sample from usb or the mic making half of this article deprecated.</p>

<h2 id="intro">Intro</h2>

<p>It began in the summer of 2018, when I’ve been playing with my <a href="https://www.teenageengineering.com/store#po-20">PO-20 “Arcade”</a> wondering if it&rsquo;s hackable,
maybe there&rsquo;s a community around hacking pocket operators like there is one for <a href="https://magiclantern.fm/">Canon “Magic Lantern”</a> firmware.</p>

<p>There is no such thing. But there is <a href="https://github.com/topisani/OTTO"><code>OTTO</code></a>, an open source project initially inspired by OP-1 but clearly going in their own direction at the moment, consider contributing if you&rsquo;re interested.</p>

<p>I was thinking about joining <code>OTTO</code> but ultimately decided against that, my main concerns were the power-hungry hardware (Raspberry Pi 3+) I wanted something smaller with long battery life.</p>

<p>The tools also raised some concern, everything was built from scratch in C++ and Faust, it would take years, and years it took to reach a V1.0 (still unreleased at the moment ofwriting) but no doubt the end result could be something beautiful.</p>

<p>Starting from scratch I was thinking to go the way of <a href="https://www.critterandguitari.com/organelle">Critter and Guitari Organelle</a> with <a href="https://puredata.info/">Pure Data</a>
In a few days of toying around, I realized that visual programming will not cut it, I needed a proper programing language.</p>

<h2 id="first-prototypes">First prototypes</h2>

<p>After a few days of comparing communities, language features and GitHub stars of <a href="https://en.wikipedia.org/wiki/Comparison_of_audio_synthesis_environments">some environments&hellip;</a></p>

<p><a href="https://supercollider.github.io/">SuperCollider</a> was looking like a winner.
With an active open source community, it was like a silver bullet for all my problems,
SuperCollider can easily be set up to run on a <a href="https://supercollider.github.io/development/building-raspberrypi">Raspberry Pi</a>.</p>

<p>The choice of hardware at that moment was clear, a Raspberry Pi Zero and a dedicated audio board (<a href="https://fe-pi.com/">Fe-Pi</a> or <a href="https://www.pjrc.com/store/teensy3_audio.html">Teensy audio adaptor</a> both based on the same chip) would do the trick.
Combined with a ~2000 mAh battery it should run for ~5 hours, still not as much as I would like but it will do for the moment.</p>

<figure>
    <img src="/images/3d&#43;proto.jpg"
         alt="Looks like a wannabe pocket operator, doesn&amp;rsquo;t it?"/> <figcaption>
            <p>Looks like a wannabe pocket operator, doesn&rsquo;t it?</p>
        </figcaption>
</figure>


<p>The first prototype was quickly made in Fusion and the plastic parts printed.
It, of course, has a few drawbacks:</p>

<ol>
<li>The buttons, I did not like the feel of the tall silicone buttons.</li>
<li>Not enough buttons.</li>
</ol>

<figure>
    <img src="/images/sequencer_render.jpg"/> 
</figure>


<p>The second prototype used mechanical keyboard buttons, and it had a lot more of them.
Initially, I cloned Volca Sample functional plus some extra stuff.</p>

<figure>
    <img src="/images/sequencer_demo.gif"
         alt="OP-1 anyone?"/> <figcaption>
            <p>OP-1 anyone?</p>
        </figcaption>
</figure>


<p>Then I started looking into how OP-Z handles the sequencing and started to recreate it in Supercollider.
After some time took the plunge and bought an OP-Z, I think from the first or second publically available batches.</p>

<h2 id="op-z-era">OP-Z Era</h2>

<figure>
    <img src="/images/opz_raspberry.jpg"
         alt="A tight fit"/> <figcaption>
            <p>A tight fit</p>
        </figcaption>
</figure>


<p>After spending some time with OP-Z I thought there is no point to try to recreate the sequencer, it would take too much time. I decided to reuse the Raspberry Pi and audio IO board and slapped them on the back of my OP-Z, it seemed the most reasonable way to get the most out of it in the shortest time possible, OP-Z already had the sequencer that I wanted but it didn&rsquo;t have any sampling capabilities(at the time of writing) so it should be a beautiful fusion.</p>

<h4 id="the-end-result">The end result</h4>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/lR7rbnsKkYU" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<h4 id="how-to-build-something-similar-dont-t">How to build something similar(dont&rsquo;t)</h4>

<p>Part list:</p>

<ol>
<li>Dedicated <a href="https://fe-pi.com/">audio board</a> with Line-In and Line-Out, Raspbian <a href="https://github.com/raspberrypi/linux/pull/1867">suports</a> it out of the box.</li>
<li>Raspberry Pi of your choice.</li>
<li>A 5V power supply.</li>
</ol>

<p>Steps to reproduce:</p>

<ol>
<li>Build Supercollider from source on <a href="https://supercollider.github.io/development/building-raspberrypi">Raspberry Pi</a></li>
<li>Go to sleep, compilation is an overnight process on R-Pi Zero.</li>
<li><a href="https://github.com/VictorBitca/opz-sc-extensions">Clone/download</a> my repo.</li>
</ol>

<p>It has two folders, <code>opz-sc-extensions</code> contains SuperCollider extension, for more details on how to use <a href="http://doc.sccode.org/Guides/UsingExtensions.html">extensions</a> with SuperCollider, the <code>opz-plugin</code> folder contains some files that launches the extensions and a <code>golang-opz</code> folder with some code needed to further process the SuperCollider sample output because the OP-Z won&rsquo;t accept a simple <code>.aif</code> file.</p>

<h3 id="update-1">Update</h3>

<p>OP-Z recieved an <a href="https://www.teenageengineering.com/downloads/op-z">update</a> (1.1.27) and now you should be able to import WAV or AIFF files without a header (metadata).</p>

<p>It needs a custom &ldquo;header&rdquo;, this is needed only for the sampler.
There was no particular reason for <code>go</code>, I just needed a tool that I could use to search and modify some bytes in the output file, there&rsquo;s no such low-level API in <code>sclang</code>.</p>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"> 
<span style="color:#960050;background-color:#1e0010">//</span> <span style="color:#960050;background-color:#1e0010">Custom</span> <span style="color:#960050;background-color:#1e0010">teenage</span> <span style="color:#960050;background-color:#1e0010">enginnering</span> <span style="color:#960050;background-color:#1e0010">.aif</span> <span style="color:#960050;background-color:#1e0010">header</span> <span style="color:#960050;background-color:#1e0010">for</span> <span style="color:#960050;background-color:#1e0010">sample</span> <span style="color:#960050;background-color:#1e0010">files</span>
<span style="color:#960050;background-color:#1e0010">op</span><span style="color:#ae81ff">-1</span>{
    <span style="color:#f92672">&#34;adsr&#34;</span>: [<span style="color:#ae81ff">2624</span>, <span style="color:#ae81ff">576</span>, <span style="color:#ae81ff">26623</span>, <span style="color:#ae81ff">6720</span>, <span style="color:#ae81ff">4000</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">4000</span>, <span style="color:#ae81ff">4000</span>],
    <span style="color:#f92672">&#34;base_freq&#34;</span>: <span style="color:#ae81ff">440</span>,
    <span style="color:#f92672">&#34;fx_active&#34;</span>: <span style="color:#66d9ef">true</span>,
    <span style="color:#f92672">&#34;fx_params&#34;</span>: [<span style="color:#ae81ff">8896</span>, <span style="color:#ae81ff">14816</span>, <span style="color:#ae81ff">1536</span>, <span style="color:#ae81ff">6688</span>, <span style="color:#ae81ff">8000</span>, <span style="color:#ae81ff">8000</span>, <span style="color:#ae81ff">8000</span>, <span style="color:#ae81ff">8000</span>],
    <span style="color:#f92672">&#34;fx_type&#34;</span>: <span style="color:#e6db74">&#34;spring&#34;</span>,
    <span style="color:#f92672">&#34;knobs&#34;</span>: [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">28448</span>, <span style="color:#ae81ff">32503</span>, <span style="color:#ae81ff">32503</span>, <span style="color:#ae81ff">12000</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">9832</span>],
    <span style="color:#f92672">&#34;lfo_active&#34;</span>: <span style="color:#66d9ef">false</span>,
    <span style="color:#f92672">&#34;lfo_params&#34;</span>: [<span style="color:#ae81ff">2000</span>, <span style="color:#ae81ff">26304</span>, <span style="color:#ae81ff">5728</span>, <span style="color:#ae81ff">14464</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>],
    <span style="color:#f92672">&#34;lfo_type&#34;</span>: <span style="color:#e6db74">&#34;element&#34;</span>,
    <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;20140407_1233&#34;</span>,
    <span style="color:#f92672">&#34;octave&#34;</span>: <span style="color:#ae81ff">1</span>,
    <span style="color:#f92672">&#34;synth_version&#34;</span>: <span style="color:#ae81ff">1</span>,
    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;sampler&#34;</span>
}</code></pre></div>

<p>The custom header which is utf8 encoded and replaced the original &ldquo;header&rdquo; from SuperCollider output, thanks to <a href="http://gerotakke.de/">Gero Takke</a> for figuring things out.</p>

<p>To run the plugin on a device you&rsquo;ll need to install <a href="https://golang.org/doc/install"><code>golang</code></a>
then in the <code>golang-opz</code> directory run only once:</p>

<p><code>go build</code></p>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"> 
<span style="color:#75715e">// The code that replaces .aif headers.
</span><span style="color:#75715e"></span>    <span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

    <span style="color:#f92672">import</span> (
        <span style="color:#e6db74">&#34;bytes&#34;</span>
        <span style="color:#e6db74">&#34;fmt&#34;</span>
        <span style="color:#e6db74">&#34;io/ioutil&#34;</span>
    )

    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">check</span>(<span style="color:#a6e22e">e</span> <span style="color:#66d9ef">error</span>) {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            panic(<span style="color:#a6e22e">e</span>)
        }
    }

    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
        <span style="color:#a6e22e">headerData</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">ReadFile</span>(<span style="color:#e6db74">&#34;header&#34;</span>)
        <span style="color:#a6e22e">soundDonor</span>, <span style="color:#a6e22e">err2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">ReadFile</span>(<span style="color:#e6db74">&#34;input.aif&#34;</span>)

        <span style="color:#a6e22e">check</span>(<span style="color:#a6e22e">err</span>)
        <span style="color:#a6e22e">check</span>(<span style="color:#a6e22e">err2</span>)

        <span style="color:#a6e22e">ssndIndex</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bytes</span>.<span style="color:#a6e22e">Index</span>(<span style="color:#a6e22e">soundDonor</span>, []byte(<span style="color:#e6db74">&#34;SSND&#34;</span>))
        <span style="color:#a6e22e">soundData</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">soundDonor</span>[<span style="color:#a6e22e">ssndIndex</span>:len(<span style="color:#a6e22e">soundDonor</span>)]
        <span style="color:#a6e22e">fullData</span> <span style="color:#f92672">:=</span> append(<span style="color:#a6e22e">headerData</span>, <span style="color:#a6e22e">soundData</span><span style="color:#f92672">...</span>)

        <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">WriteFile</span>(<span style="color:#e6db74">&#34;output.aif&#34;</span>, <span style="color:#a6e22e">fullData</span>, <span style="color:#ae81ff">0644</span>)
    }</code></pre></div>

<p>Next you could open <code>opz-sampler.scd</code> or <code>opz-synth.scd</code> in SuperCollider or run headless:</p>

<p><code>export DISPLAY=:0.0 &amp;&amp; sclang opz-synth.scd</code></p>

<p>There are quite a few pros and cons to this approach to an op-z plugin.</p>

<h4 id="the-pros">The pros:</h4>

<ol>
<li>SuperCollider.</li>
<li>An enormous library of UGens (units that process or generate sound) for SuperCollider.</li>
<li>A community behind SuperCollider, usually you can find the answer to common questions but still, documentation is king.</li>
</ol>

<h4 id="the-cons">The cons:</h4>

<ol>
<li>Long boot times, around 1 min caused by a massive software stack.</li>
<li>Latency, around 10 ms with just <a href="http://jackaudio.org/">jackd process</a> using 20% of the CPU.</li>
<li>Additional latency because of SuperCollder&rsquo;s <a href="http://doc.sccode.org/Guides/ClientVsServer.html">client-server architecture</a>.</li>
<li>Unstable on Raspberry Pi, more software more bugs.</li>
<li><a href="http://jackaudio.org/">jackd process</a> would crash after one minute of inactivity if using a reverb effect for some reason.</li>
</ol>

<p>In conclusion, the end product is not as practical as I wished it was, it boots slowly, massive software overhead, buggy and still power-hungry device, SuperCollider on Raspberry Pi Zero isn&rsquo;t a good enough for this task.</p>

<h3 id="the-shape-of-things-to-come">The shape of things to come</h3>

<p>I need a device with no boot time and almost real-time performance so I&rsquo;ll go with a microcontroller, the Zero board is replaced with a
<a href="https://www.pjrc.com/store/teensy36.html">Teensy 3.6</a>, a small beast of a microcontroller with an additional chip of <a href="https://www.electrodragon.com/product/2pcs-ipus-ips6404-iot-ram/">8MB of RAM</a>, and 32 GB of flash storage.</p>

<figure>
    <img src="/images/thigs_to_come.jpg"
         alt="A propper plugin thingy"/> <figcaption>
            <p>A propper plugin thingy</p>
        </figcaption>
</figure>


<h4 id="the-follow-up-https-victorbitca-github-io-posts-2019-05-a-proper-op-z-plugin-prototype"><a href="https://victorbitca.github.io/posts/2019/05/a-proper-op-z-plugin-prototype/">The follow-up&hellip;</a></h4>
]]></content>
        </item>
        
    </channel>
</rss>
