<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hello there...</title>
        <link>https://VictorBitca.github.io/posts/</link>
        <description>Recent content in Posts on Hello there...</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 04 May 2019 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://VictorBitca.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>A proper OP-Z plugin prototype</title>
            <link>https://VictorBitca.github.io/posts/2019/05/a-proper-op-z-plugin-prototype/</link>
            <pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://VictorBitca.github.io/posts/2019/05/a-proper-op-z-plugin-prototype/</guid>
            <description>Let&amp;rsquo;s be honest, previous attempt at an OP-Z plugin thingy was a failure, Main drawbacks being the boot times, all the bugs and overhead that come with running Linux &amp;amp; jack &amp;amp; supercollider on such a small machine. You just don&amp;rsquo;t need Linux if you want to run a medium complexity synth. But most importantly it kinda failed at being fun.
Teesny 3.6 and teensy audio board  With teensy 3.</description>
            <content type="html"><![CDATA[<p>Let&rsquo;s be honest, <a href="https://victorbitca.github.io/posts/2019/04/creating-an-op-z-plugin/" target="_blank">previous attempt</a> at an OP-Z plugin thingy was a failure,
Main drawbacks being the boot times, all the bugs and overhead that come with running <code>Linux</code> &amp; <code>jack</code> &amp; <code>supercollider</code> on such a small machine.
You just don&rsquo;t need Linux if you want to run a medium complexity synth.
But most importantly it kinda failed at being fun.</p>


    <figure class="left" >
        <img src="/images/thigs_to_come.jpg"   />

        
            <figcaption class="center" >Teesny 3.6 and teensy audio board</figcaption>
        
    </figure>



<p>With <a href="https://www.pjrc.com/store/teensy36.html" target="_blank">teensy 3.6</a> &amp; <a href="https://www.pjrc.com/store/teensy3_audio.html" target="_blank">teensy audio board</a>, the boot times are around a second or less, it&rsquo;s faster than the OP-Z!
The CPU usage is less on teensy than on Raspberry Pi Zero for the same building blocks (oscilators and other effects).
<a href="https://www.pjrc.com/teensy/gui/" target="_blank">Teensy audio library</a> is a really great tool, synths that can rival the OP-Z&rsquo;s built-in ones can be easily built using the basic building blocks.</p>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube.com/embed/MKe8P8wL87o" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<p>The first iteration it&rsquo;s a simple hackable synth, maybe also a sampler in the future.
A small semi-modular portable plugin <a href="http://www.makenoisemusic.com/synthesizers/ohcoast" target="_blank">like this one</a> could be a bit more fun but that&rsquo;s for the next time.</p>

<p><a href="https://github.com/VictorBitca/opz-teensy" target="_blank">Full code here</a>, just open the teensy-opz.ino in arduino and upload it.</p>
]]></content>
        </item>
        
        <item>
            <title>Finding common regions in multiple audio files</title>
            <link>https://VictorBitca.github.io/posts/2019/04/finding-common-regions-in-multiple-audio-files/</link>
            <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://VictorBitca.github.io/posts/2019/04/finding-common-regions-in-multiple-audio-files/</guid>
            <description>Probably you&amp;rsquo;ve been binge-watching a series and those pesky intros always got in your way. The intro and outro song is already playing on repeat in your head, the visuals already burned onto your retina, you&amp;rsquo;re ready to do anything to not hear one more time that intro song.
Some streaming services like Netflix already have a skip intro button, but how does it work? Do you really think that people at Netflix in charge of their content specify in their contracts that content providers should also provide the intro/outro time range?</description>
            <content type="html"><![CDATA[

<p>Probably you&rsquo;ve been binge-watching a series and those pesky intros always got in your way.
The intro and outro song is already playing on repeat in your head, the visuals already burned onto your retina, you&rsquo;re ready to do anything to not hear one more time that intro song.</p>

<p>Some streaming services like Netflix already have a skip intro button, but how does it work?
Do you really think that people at Netflix in charge of their content specify in their contracts that content providers should also provide the intro/outro time range?
Don&rsquo;t be silly, that would be too easy.</p>

<p>This time we&rsquo;ll try to automate that, mostly because at first glance it seemed like a challenge when some series have intros that are prefixed by a variable length pre-intro scene, so every episode has a unique intro song time range.
I&rsquo;ll use <code>golang</code> mostly because I&rsquo;m not very familiar with it.
I&rsquo;ll also need to install <a href="https://ffmpeg.org/" target="_blank"><code>ffmpeg</code></a> to do some work on the video files themselves and <code>golang</code> <a href="https://github.com/go-fingerprint/" target="_blank">wrappers</a> for <a href="https://acoustid.org/chromaprint" target="_blank">chromaprint</a></p>

<h2 id="preparation-phase">Preparation phase</h2>

<p>Let&rsquo;s imagine I own some JoJo&rsquo;s Bizarre Adventure episodes.
First, I need to strip the audio from the video files, using <code>ffmpeg</code> is fast and it looks like this in my case.</p>

<p>Strip the audio stream: <code>ffmpeg -i input.mkv -vn -c:a copy output.m4a</code></p>

<p>Next, I&rsquo;ll need to uncompress it into a .wav file also drop as many bytes as possible, making it mono and trimming it to first 3 minutes where usually the intro song plays should be good enough.</p>

<p>Convert to .wav: <code>ffmpeg -i output.m4a output.wav</code></p>

<p>Convert stereo .wav to mono .wav: <code>ffmpeg -I output.wav -ac 1 m_output.wav</code></p>

<p>Trim down to 180 seconds: <code>ffmpeg -i m_output.wav -af atrim=0:180 m_t_output.wav</code></p>

<p>Yes, it can be automated with a bash script, but I needed to do for like ten files&hellip; I should&rsquo;ve written a script.</p>

<h2 id="finding-the-common-region">Finding the common region</h2>

<p>By running a piece of raw audio data (a .wav file with no header) through chromaprint you get the fingerprints of those files which are actually just spectrograms, <a href="https://oxygene.sk/2011/01/how-does-chromaprint-work/" target="_blank">more info on how it works</a>.</p>


    <figure class="left" >
        <img src="/images/ep2wav.jpg"   />

        
            <figcaption class="center" >Typical output for a 3min .wav file</figcaption>
        
    </figure>



<p>Comparing two perfectly aligned audio files results in this image.
The black area at the beginning is where the spectrograms <code>XOR</code>-ed perfectly resulting mostly in a black area.</p>


    <figure class="left" >
        <img src="/images/2min-diff.jpg"   />

        
            <figcaption class="center" >Comparing first 2min of two episodes</figcaption>
        
    </figure>



<p>But in some cases, most of the cases actually intros aren&rsquo;t aligned perfectly, before the intro song begins there could be some scenes from previous episodes or some pre-intro scenes from the current episode.
Those scenes always vary in length and if I were to compare the spectrograms it would look like a bunch of noise.</p>

<p>The only way to find the common areas on two different spectrograms is to slide them past each other like a puzzle each iteration resulting in a match score.
I start with an 50% offset between the slices (<a href="https://blog.golang.org/go-slices-usage-and-internals" target="_blank">golang view of an array</a>) and end on -50% offset, good enough for the intro I&rsquo;m searching, each time the offset decreases the slices get actually a bit bigger then again smaller (highlighted in blue).</p>

<p>After all the slide and compare action, I&rsquo;ll pick the iteration with the best score and do a comparison, usually resulting in something like the picture above.</p>


    <figure class="left" >
        <img src="/images/match-search.jpg"   />

        
            <figcaption class="center" >Initial state - incremental sliding and comparing two fingerprints</figcaption>
        
    </figure>



<p>By the way, raw fingerprints of those two files are just <code>int32</code> slices, images above are just for visual aid and the <code>int32</code> values are one-pixel width vertical slices from each fingerprint.
The comparison between the values is done using <a href="https://en.wikipedia.org/wiki/Hamming_distance" target="_blank">Hamming distance</a> for each pair of <code>int32</code> values.</p>

<p>Once I compared the best match I get a similar result but with more numbers:</p>

<p><code>[15, 20, 9, 13, 12, 10, 6, 7, 3, 2, 2, 1, 0, 3, 2, 1, 9, 13, 12, 14]</code></p>

<p>Each value is the Hamming distance between two <code>int32</code> pairs and its easy to spot somewhere in the middle there is a subsequence that gets below 10 and sits there for quite a while.
That is the matching area I was looking for, If I were to compare those fingerprints and output an image it would have a blacker area somewhere in the middle, next step is to calculate how long it is, then taking into account the offset it is trivial to calculate where the intro song started and ended for both files.</p>


    <figure class="left" >
        <img src="/images/matcher_demo.gif"   />

        
            <figcaption class="center" >Searching for intro in 10 files (single threaded)</figcaption>
        
    </figure>



<h2 id="conclusion">Conclusion</h2>

<p>The end result is a pretty reliable way of finding common regions between two or more audio files, at the moment of writing one major drawback is that the starting point
is only an offset of 50% between the audio files.</p>

<p>The implementation can be seen <a href="https://github.com/VictorBitca/matcher" target="_blank"><code>here</code></a>.</p>
]]></content>
        </item>
        
        <item>
            <title>Creating an OP-Z Plugin</title>
            <link>https://VictorBitca.github.io/posts/2019/04/creating-an-op-z-plugin/</link>
            <pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://VictorBitca.github.io/posts/2019/04/creating-an-op-z-plugin/</guid>
            <description>Where it actually started It all began almost a year ago, when I’ve been playing with my PO-20 “Arcade” and wondered what if it was hackable, maybe if it was there would also be a community around pocket operators like there is one for Canon “Magic Lantern” firmware. Well, there was no such thing. But there is OTTO, an open source project initially inspired by OP-1 but clearly going in their own direction at the moment, consider contributing if you&amp;rsquo;re interested.</description>
            <content type="html"><![CDATA[

<h2 id="where-it-actually-started">Where it actually started</h2>

<p>It all began almost a year ago, when I’ve been playing with my <a href="https://www.teenageengineering.com/store#po-20" target="_blank">PO-20 “Arcade”</a> and wondered what if it was hackable,
maybe if it was there would also be a community around pocket operators like there is one for <a href="https://magiclantern.fm/" target="_blank">Canon “Magic Lantern”</a> firmware.
Well, there was no such thing. But there is <a href="https://github.com/topisani/OTTO" target="_blank">OTTO</a>, an open source project initially inspired by OP-1 but clearly going in their own direction at the moment, consider contributing if you&rsquo;re interested.</p>

<p>I was thinking about joining them but ultimately decided against that, my main concerns were the power-hungry hardware (Raspberry Pi 3+) I wanted something smaller with long battery life.
The tools also raised some concern, everything was built from scratch in C++ and Faust, it would take years, and years it took to reach a V1.0 (still unreleased at the moment of editing this) but no doubt the end result could be something beautiful.</p>

<p>Starting from scratch I was thinking to go the way of <a href="https://www.critterandguitari.com/organelle" target="_blank">Critter and Guitari Organelle</a> with <a href="https://puredata.info/" target="_blank">Pure Data</a>
In a few days of toying around, I realized that visual programming will not cut it, I needed a proper programing language.</p>

<h2 id="first-prototypes">First prototypes</h2>

<p>After a few days of comparing communities, language features and GitHub stars of <a href="https://en.wikipedia.org/wiki/Comparison_of_audio_synthesis_environments" target="_blank">some environments&hellip;</a></p>

<p><a href="https://supercollider.github.io/" target="_blank">SuperCollider</a> was looking like a winner.
With an active open source community, it was like a silver bullet for all my problems,
SuperCollider can easily be set up to run on a <a href="https://supercollider.github.io/development/building-raspberrypi" target="_blank">Raspberry Pi</a>.</p>

<p>So the choice of hardware at that moment was clear, a Raspberry Pi Zero and a dedicated audio board (<a href="https://fe-pi.com/" target="_blank">Fe-Pi</a> or <a href="https://www.pjrc.com/store/teensy3_audio.html" target="_blank">Teensy audio adaptor</a> it&rsquo;s based on the same chip) would do the trick.
Combined with a ~2000 mAh battery it should run for ~5 hours, still not as much as I would like but it will do for the moment.</p>


    <figure class="left" >
        <img src="/images/3d&#43;proto.jpg"   />

        
            <figcaption class="center" >Looks like a wannabe pocket operator, doesn&#39;t it?</figcaption>
        
    </figure>



<p>The first prototype was quickly made in Fusion and the plastic parts printed.
It, of course, has a few drawbacks:</p>

<ol>
<li>The buttons, I did not like the feel of the tall silicone buttons.</li>
<li>Not enough buttons.</li>
</ol>


    <figure class="left" >
        <img src="/images/sequencer_render.jpg"   />

        
    </figure>



<p>The second prototype used mechanical keyboard buttons, and it had a lot more of them.
Initially, I cloned Volca Sample functional plus some extra stuff.</p>


    <figure class="left" >
        <img src="/images/sequencer_demo.gif"   />

        
            <figcaption class="center" >OP-1 anyone?</figcaption>
        
    </figure>



<p>Then I started looking into how OP-Z handles the sequencing and started to recreate it in Supercollider.
After some time took the plunge and bought an OP-Z, I think from the first or second publically available batches.</p>

<h2 id="op-z-era">OP-Z era</h2>


    <figure class="left" >
        <img src="/images/opz_raspberry.jpg"   />

        
            <figcaption class="center" >A tight fit</figcaption>
        
    </figure>



<p>After playing for a while with the OP-Z I thought there is no point to try to recreate the sequencer style, it would take too much time so I decided to reuse the Raspberry Pi and audio IO board and slapped them on the back of my OP-Z, it seemed the most reasonable way to get the most out of it in the shortest time possible, OP-Z already had the sequencer that I wanted but it didn&rsquo;t have any sampling capabilities so it should be a beautiful fusion.</p>

<h4 id="the-end-result">The end result</h4>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="//www.youtube.com/embed/lR7rbnsKkYU" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<h4 id="how-to-build-something-similar">How to build something similar</h4>

<p>Part list:</p>

<ol>
<li>Dedicated <a href="https://fe-pi.com/" target="_blank">audio board</a> with Line-In and Line-Out, Raspbian <a href="https://github.com/raspberrypi/linux/pull/1867" target="_blank">suports</a> it out of the box.</li>
<li>Raspberry Pi of your choice.</li>
<li>A 5V power supply.</li>
</ol>

<p>Steps to reproduce:</p>

<ol>
<li>Build Supercollider from source on <a href="https://supercollider.github.io/development/building-raspberrypi" target="_blank">Raspberry Pi</a></li>
<li>Go to sleep, compilation is an overnight process on R-Pi Zero.</li>
<li><a href="https://github.com/VictorBitca/opz-sc-extensions" target="_blank">Clone/download</a> my repo.</li>
</ol>

<p>It has two folders, <code>opz-sc-extensions</code> contains SuperCollider extension, for more details on how to use <a href="http://doc.sccode.org/Guides/UsingExtensions.html" target="_blank">extensions</a> with SuperCollider, the <code>opz-plugin</code> folder contains some files that launches the extensions and a <code>golang-opz</code> folder with some code needed to further process the SuperCollider sample output because the OP-Z won&rsquo;t accept a simple <code>.aif</code> file.</p>

<h3 id="update">Update</h3>

<p>OP-Z recieved an <a href="https://www.teenageengineering.com/downloads/op-z" target="_blank">update</a> (1.1.27) and now you should be able to import WAV or AIFF files without a header (metadata).</p>

<p>It needs a custom &ldquo;header&rdquo;, this is needed only for the sampler.
There was no particular reason for <code>go</code>, I just needed a tool that I could use to search and modify some bytes in the output file, there&rsquo;s no such low-level API in <code>sclang</code>.</p>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"> 
<span style="color:#960050;background-color:#1e0010">//</span> <span style="color:#960050;background-color:#1e0010">Custom</span> <span style="color:#960050;background-color:#1e0010">teenage</span> <span style="color:#960050;background-color:#1e0010">enginnering</span> <span style="color:#960050;background-color:#1e0010">.aif</span> <span style="color:#960050;background-color:#1e0010">header</span> <span style="color:#960050;background-color:#1e0010">for</span> <span style="color:#960050;background-color:#1e0010">sample</span> <span style="color:#960050;background-color:#1e0010">files</span>
<span style="color:#960050;background-color:#1e0010">op</span><span style="color:#ae81ff">-1</span>{
    <span style="color:#f92672">&#34;adsr&#34;</span>: [<span style="color:#ae81ff">2624</span>, <span style="color:#ae81ff">576</span>, <span style="color:#ae81ff">26623</span>, <span style="color:#ae81ff">6720</span>, <span style="color:#ae81ff">4000</span>, <span style="color:#ae81ff">64</span>, <span style="color:#ae81ff">4000</span>, <span style="color:#ae81ff">4000</span>],
    <span style="color:#f92672">&#34;base_freq&#34;</span>: <span style="color:#ae81ff">440</span>,
    <span style="color:#f92672">&#34;fx_active&#34;</span>: <span style="color:#66d9ef">true</span>,
    <span style="color:#f92672">&#34;fx_params&#34;</span>: [<span style="color:#ae81ff">8896</span>, <span style="color:#ae81ff">14816</span>, <span style="color:#ae81ff">1536</span>, <span style="color:#ae81ff">6688</span>, <span style="color:#ae81ff">8000</span>, <span style="color:#ae81ff">8000</span>, <span style="color:#ae81ff">8000</span>, <span style="color:#ae81ff">8000</span>],
    <span style="color:#f92672">&#34;fx_type&#34;</span>: <span style="color:#e6db74">&#34;spring&#34;</span>,
    <span style="color:#f92672">&#34;knobs&#34;</span>: [<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">28448</span>, <span style="color:#ae81ff">32503</span>, <span style="color:#ae81ff">32503</span>, <span style="color:#ae81ff">12000</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">9832</span>],
    <span style="color:#f92672">&#34;lfo_active&#34;</span>: <span style="color:#66d9ef">false</span>,
    <span style="color:#f92672">&#34;lfo_params&#34;</span>: [<span style="color:#ae81ff">2000</span>, <span style="color:#ae81ff">26304</span>, <span style="color:#ae81ff">5728</span>, <span style="color:#ae81ff">14464</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0</span>],
    <span style="color:#f92672">&#34;lfo_type&#34;</span>: <span style="color:#e6db74">&#34;element&#34;</span>,
    <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;20140407_1233&#34;</span>,
    <span style="color:#f92672">&#34;octave&#34;</span>: <span style="color:#ae81ff">1</span>,
    <span style="color:#f92672">&#34;synth_version&#34;</span>: <span style="color:#ae81ff">1</span>,
    <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;sampler&#34;</span>
}</code></pre></div>

<p>The custom header which is utf8 encoded and replaced the original &ldquo;header&rdquo; from SuperCollider output, thanks to <a href="http://gerotakke.de/" target="_blank">Gero Takke</a> for figuring things out.</p>

<p>To run the plugin on a device you&rsquo;ll need to install <a href="https://golang.org/doc/install" target="_blank"><code>golang</code></a>
then in the <code>golang-opz</code> directory run only once:</p>

<p><code>go build</code></p>

<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"> 
<span style="color:#75715e">// The code that replaces .aif headers.
</span><span style="color:#75715e"></span>    <span style="color:#f92672">package</span> <span style="color:#a6e22e">main</span>

    <span style="color:#f92672">import</span> (
        <span style="color:#e6db74">&#34;bytes&#34;</span>
        <span style="color:#e6db74">&#34;fmt&#34;</span>
        <span style="color:#e6db74">&#34;io/ioutil&#34;</span>
    )

    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">check</span>(<span style="color:#a6e22e">e</span> <span style="color:#66d9ef">error</span>) {
        <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">e</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
            panic(<span style="color:#a6e22e">e</span>)
        }
    }

    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">main</span>() {
        <span style="color:#a6e22e">headerData</span>, <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">ReadFile</span>(<span style="color:#e6db74">&#34;header&#34;</span>)
        <span style="color:#a6e22e">soundDonor</span>, <span style="color:#a6e22e">err2</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">ReadFile</span>(<span style="color:#e6db74">&#34;input.aif&#34;</span>)

        <span style="color:#a6e22e">check</span>(<span style="color:#a6e22e">err</span>)
        <span style="color:#a6e22e">check</span>(<span style="color:#a6e22e">err2</span>)

        <span style="color:#a6e22e">ssndIndex</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">bytes</span>.<span style="color:#a6e22e">Index</span>(<span style="color:#a6e22e">soundDonor</span>, []byte(<span style="color:#e6db74">&#34;SSND&#34;</span>))
        <span style="color:#a6e22e">soundData</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">soundDonor</span>[<span style="color:#a6e22e">ssndIndex</span>:len(<span style="color:#a6e22e">soundDonor</span>)]
        <span style="color:#a6e22e">fullData</span> <span style="color:#f92672">:=</span> append(<span style="color:#a6e22e">headerData</span>, <span style="color:#a6e22e">soundData</span><span style="color:#f92672">...</span>)

        <span style="color:#a6e22e">ioutil</span>.<span style="color:#a6e22e">WriteFile</span>(<span style="color:#e6db74">&#34;output.aif&#34;</span>, <span style="color:#a6e22e">fullData</span>, <span style="color:#ae81ff">0644</span>)
    }</code></pre></div>

<p>Next you could open <code>opz-sampler.scd</code> or <code>opz-synth.scd</code> in SuperCollider or run headless:</p>

<p><code>export DISPLAY=:0.0 &amp;&amp; sclang opz-synth.scd</code></p>

<p>There are quite a few pros and cons to this approach to an op-z plugin.</p>

<h4 id="the-pros">The pros:</h4>

<ol>
<li>SuperCollider.</li>
<li>An enormous library of UGens (units that process or generate sound) for SuperCollider.</li>
<li>A community behind SuperCollider, usually you can find the answer to common questions but still, documentation is king.</li>
</ol>

<h4 id="the-cons">The cons:</h4>

<ol>
<li>Long boot times, around 1 min caused by a massive software stack.</li>
<li>Latency, around 10 ms with just <a href="http://jackaudio.org/" target="_blank">jackd process</a> using 20% of the CPU.</li>
<li>Additional latency because of SuperCollder&rsquo;s <a href="http://doc.sccode.org/Guides/ClientVsServer.html" target="_blank">client-server architecture</a>.</li>
<li>Unstable on Raspberry Pi, more software more bugs.</li>
<li><a href="http://jackaudio.org/" target="_blank">jackd process</a> would crash after one minute of inactivity if using a reverb effect for some reason.</li>
</ol>

<p>In conclusion, the end product is not as practical as I wished it was, it boots slowly, massive software overhead, buggy and still power-hungry device, SuperCollider on Raspberry Pi Zero isn&rsquo;t a good enough for this task.</p>

<h3 id="the-shape-of-things-to-come">The shape of things to come</h3>

<p>I need a device with no boot time and almost real-time performance so I&rsquo;ll go with a microcontroller, the Zero board is replaced with a
<a href="https://www.pjrc.com/store/teensy36.html" target="_blank">Teensy 3.6</a>, a small beast of a microcontroller with an additional chip of <a href="https://www.electrodragon.com/product/2pcs-ipus-ips6404-iot-ram/" target="_blank">8MB of RAM</a>, and 32 GB of flash storage.</p>


    <figure class="left" >
        <img src="/images/thigs_to_come.jpg"   />

        
            <figcaption class="center" >A propper plugin thingy</figcaption>
        
    </figure>



<h4 id="the-follow-up-https-victorbitca-github-io-posts-2019-05-a-proper-op-z-plugin-prototype"><a href="https://victorbitca.github.io/posts/2019/05/a-proper-op-z-plugin-prototype/" target="_blank">The follow-up&hellip;</a></h4>
]]></content>
        </item>
        
    </channel>
</rss>
